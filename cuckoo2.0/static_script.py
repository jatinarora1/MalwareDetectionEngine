#!/usr/bin/env python

from modules.processing.static import *
from modules.processing.strings import *
from modules.processing.irma import *
import subprocess
from os import listdir
import os
import sys
import json

YARA_DIR = '/home/mohit/Desktop/MalwareML/static/yara_rules/index.yar'
OUTPUT_DIR = "/static_output/"
WINDEF_LOADLIB_DIR = '/home/mohit/Desktop/MalwareML/static/loadlibrary/'

def main():
    file_list = sys.argv[1]
    with open(file_list) as f:
       file_list = [line.strip() for line in f]
    output_dir = os.getcwd() + OUTPUT_DIR

    if not os.path.exists(output_dir):
        os.makedirs(output_dir)
    
    for f in file_list:
        try:
            # Cuckoo's static module
            static = PortableExecutable(f)

            # Saving output in a dict, may need to change formatting based on ML framework requirements
            out = {}
            out['filename'] = os.path.basename(f)
            out['static'] = static.run()

            try:

                out['yara_signatures'] = []

                # Calling YARA script from the console
                signatures = subprocess.check_output(['yara', YARA_DIR, f, '-r', '-w'])

                sig_string = ''

                # Subprocess returns output as single chars? Kind of weird

                for sig in ''.join(signatures):
                    sig_string += sig

                out['yara_signatures'] = sig_string.replace(" ", "\n").split("\n")[0:-1:2]

            except subprocess.CalledProcessError as e:
                # Catching YARA exceptions - didn't see too many but may need to debug in future

                print("cmd: " + "".join(e.cmd))
                print("return code: " + str(e.returncode))
                print("output: " + str(e.output))


            json_out = json.dumps(out, indent=4)
            fi = open(output_dir + "/" + os.path.basename(f) + ".json", "w")
            fi.write(json_out)
            fi.close()

        # Catch any other exceptions
        except Exception as e:
            print(sys.exc_info())
            print(sys.exc_info()[0])


pass

if __name__ == "__main__":
    main()


