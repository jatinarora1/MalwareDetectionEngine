#!/usr/bin/env python
import os
import signal
import argparse
import requests
import time
import logging
import subprocess

CUCKOO_PID=None

if not os.path.exists("log"):
	os.makedirs("log")
logging.basicConfig(format='%(asctime)s - %(levelname)s: %(message)s',filename='log/cuckoo_wrapper.log',level=logging.DEBUG)

def terminate_cuckoo(signal, frame):
	global CUCKOO_PID
	os.kill(CUCKOO_PID, signal.SIGTERM)

def check_cuckoo(REST_URL,API_PORT):
	try:	
		r = requests.get(REST_URL)
		data = r.json()

		tasks_running = int(data['tasks']['running'])
		tasks_pending = int(data['tasks']['pending'])
		# If the number of tasks pending is more than 0 and the number of tasks running is
		# still 0, then it's possible that cuckoo has frozen
		if (tasks_pending > 0 and tasks_running == 0):
			logging.debug("Cuckoo has %d pending tasks with no running tasks." % tasks_pending)
			return False
	except requests.exceptions.ConnectionError as e:
		logging.debug(e)
		logging.warning("API COULD NOT BE REACHED AT PORT %d!" % API_PORT)
	except ValueError as e:
		logging.debug(e)
		logging.warning("COULD NOT DECODE JSON!")
	return True

def start_cuckoo():
	global CUCKOO_PID
	try:
		CUCKOO_PROC = subprocess.Popen(["./cuckoo.py"])	
		logging.info("Cuckoo has started with PID %d" % CUCKOO_PROC.pid)
		CUCKOO_PID = CUCKOO_PROC.pid
	except Exception as e:
		logging.debug(e)
		logging.critical("FAILED TO START CUCKOO! Trying again in 10 seconds...")
		time.sleep(10)
		return start_cuckoo()
	return CUCKOO_PROC

parser = argparse.ArgumentParser()
parser.add_argument("-p", "--port", help="API port", type=int, required=False, default=8090)
args = parser.parse_args()

API_PORT = args.port
REST_URL = "http://localhost:%d/cuckoo/status" % API_PORT

#Guarantee that Cuckoo Starts
#start_cuckoo returns -5 if subprocess.popen fails
CUCKOO_PROC = start_cuckoo()

FROZEN_NUM = 0
FROZEN_MAX = 5

signal.signal(signal.SIGTERM,terminate_cuckoo)
signal.signal(signal.SIGINT,terminate_cuckoo)

try:
	while True:
		# This restarts cuckoo if it is stops unexpectedly
		# POLL RETURNS NONE if the process is NOT finished, so a value would mean
		# that the process is finished (which it should never be)
		# None = False 
		if (CUCKOO_PROC.poll()):
			logging.critical("CUCKOO SHUT DOWN UNEXPECTEDLY! Restarting Cuckoo...")
			CUCKOO_PROC = start_cuckoo()
		
		if (not check_cuckoo(REST_URL,API_PORT)):	
			FROZEN_NUM+=1
			logging.debug("Cuckoo has failed check %d time(s)" % FROZEN_NUM)
			
			# If the conditions for a possibly frozen cuckoo have occurred 
			# FROZEN_MAX times, then restart cuckoo
			if (FROZEN_NUM >= FROZEN_MAX):
				FROZEN_NUM = 0
				logging.critical("CUCKOO IS NOT RESPONDING! Terminating Cuckoo...")
				os.kill(CUCKOO_PROC.pid, signal.SIGTERM)
				logging.debug("Sleeping for 10...")
				time.sleep(10)
				CUCKOO_PROC = start_cuckoo()
		time.sleep(60)
except:
	os.kill(CUCKOO_PROC.pid, signal.SIGTERM)
