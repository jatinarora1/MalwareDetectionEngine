# Copyright (C) 2010-2013 Claudio Guarnieri.
# Copyright (C) 2014-2015 Cuckoo Foundation.
# This file is part of Cuckoo Sandbox - http://www.cuckoosandbox.org
# See the file 'docs/LICENSE' for copying permission.

import os
import shlex
import logging
import subprocess
import tempfile
import time
import sys

from lib.core.config import Config
from lib.common.abstracts import Package
from lib.api.process import Process

pid_file = "C:\\Dlls\\pid.txt"

pid_out_file = "C:\\Dlls\\pid_out.txt"

log = logging.getLogger(__name__)

class Exe(Package):
    """EXE analysis package."""

    def startHelper(self, path):
        args = self.options.get("arguments", "")

        cfg = Config("analysis.conf")
	name, ext = os.path.splitext(path)
        if not ext:
            new_path = name + ".exe"
            os.rename(path, new_path)
            path = new_path

        
        # Get the arguments
        #free = self.options.get("free", False)
        no_inject = self.options.get("no_inject", False)
	#dbi = self.options.get("dbi", None)
        timeout = self.options.get("timeout", 20)
        #cuckoomon = self.options.get("cuckoomon", None)
        #dis = self.options.get("dis", None)
        #eep = self.options.get("eep", None)
        #detach = self.options.get("detach", None)
        #libdft = self.options.get("libdft", None)
	watchaddrs = self.options.get("watchaddrs",None)
	redirecttoaddrs = self.options.get("redirecttoaddrs",None)
	updateaddrs = self.options.get("updateaddrs",None)	
	request_file = self.options.get("request_file",None)
	formatted_request_file = self.options.get("formatted_request_file",None)


	rewriter_path = "C:\\dlls\\dvasion_exp.exe"
	request_file_path = "C:\\dlls\\LWR.txt"
	formatted_request_file_path = "EMP_Request.bin"
	rewriter_args = ["--watchdll","C:\\dlls\\dvasion_exp.dll"]

	if watchaddrs != None:
		rewriter_args.append("--watchaddrs")
		rewriter_args.append(str(watchaddrs))

	if redirecttoaddrs != None:
		rewriter_args.append("--redirecttoaddrs")
		rewriter_args.append(str(redirecttoaddrs))
	
	if updateaddrs != None:
		rewriter_args.append("--updateaddrs")
		rewriter_args.append(str(updateaddrs))

	if request_file != None:
		rewriter_args.append("--filepath")
		rewriter_args.append(request_file_path)

        if formatted_request_file != None:
                rewriter_args.append("--requestfile")
                rewriter_args.append(formatted_request_file_path)
	

	#@todo: We need to add timeout parameter in lightweight rewriter
	if (timeout != 20):
		rewriter_args.append("--timeout")
		rewriter_args.append(str(timeout))
	

	ngenCmd = "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\ngen.exe install " + path + " > C:\\Dlls\\out-ngen.txt"
        log.warning(ngenCmd)
        os.system(ngenCmd)
        #subprocess.Popen(ngenCmd,shell=True)
        time.sleep(3)



	rewriter_args.append("--process")
        rewriter_args.append(path)
        rewriter_args.append((args))	

	#log.info("Rewriter execution command: " + ' '.join(rewriter_args))

	return self.execute(rewriter_path, args=rewriter_args)

    def start(self,path):
	try:
		return self.startHelper(path)
	except Exception, e: 
		log.warning("Unhandled exception in lightweight explorer:")
		log.warning(e.args)
		return 0	
