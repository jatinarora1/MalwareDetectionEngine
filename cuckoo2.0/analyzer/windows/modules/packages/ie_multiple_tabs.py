# Copyright (C) 2010-2013 Claudio Guarnieri.
# Copyright (C) 2014-2015 Cuckoo Foundation.
# This file is part of Cuckoo Sandbox - http://www.cuckoosandbox.org
# See the file 'docs/LICENSE' for copying permission.

import logging
import os
import subprocess
import time

import httplib
from urlparse import urlparse
import ssl

from _winreg import HKEY_LOCAL_MACHINE, HKEY_CURRENT_USER

from lib.common.abstracts import Package

#from BeautifulSoup import BeautifulSoup
import re

log = logging.getLogger(__name__)

class IE_MultiTabs(Package):
    """Internet Explorer analysis package."""
    PATHS = [
        ("ProgramFiles", "Internet Explorer", "iexplore.exe"),
    ]

    REGKEYS = [
        [
            HKEY_CURRENT_USER,
            "Software\\Microsoft\\Internet Explorer\\Main",
            {
                # "Would you like Internet Explorer as default browser?"
                "Check_Associations": "no",

                # "Set Up Windows Internet Explorer 8"
                "DisableFirstRunCustomize": 1,
            },
        ],
        [
            HKEY_CURRENT_USER,
            "Software\\Microsoft\\Internet Explorer\\Security",
            {
                "Safety Warning Level": "Low",
                "Sending_Security": "Low",
                "Viewing_Security": "Low",
            },
        ],
        [
            HKEY_LOCAL_MACHINE,
            "Software\\Microsoft\\Internet Explorer\\Main",
            {
                # Disable Security Settings Check.
                "DisableSecuritySettingsCheck": 1,
            },
        ],
        [
            HKEY_CURRENT_USER,
            "Software\\Microsoft\\Internet Explorer\\Main\\FeatureControl",
            {
                "FEATURE_LOCALMACHINE_LOCKDOWN": {
                    # "To help protect your security, Internet Explorer has
                    # restricted this webpage from running scripts or ActiveX
                    # controls that could access your computer. Click here for
                    # options..."
                    "iexplore.exe": 0,
                },
                "FEATURE_RESTRICT_FILEDOWNLOAD": {
                    # "To help protect your security, Windows Internet
                    # Explorer blocked this site from downloading files to
                    # your computer. Click here for more options..."
                    "iexplore.exe": 0,
                },
            },
        ],
        [
            HKEY_CURRENT_USER,
            "Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings",
            {
                # "You are about to be redirected to a connection that is not secure."
                "WarnOnHTTPSToHTTPRedirect": 0,

                # "You are about to view pages over a secure connection."
                "WarnOnZoneCrossing": 0,
            },
        ],
        [
            HKEY_CURRENT_USER,
            "Software\\Microsoft\\Internet Explorer\\Document Windows",
            {
                # Maximize the window by default.
                "Maximized": "yes",
            },
        ],
        [
            HKEY_CURRENT_USER,
            "Software\\Microsoft\\Internet Explorer\\Download",
            {
                # "Internet Explorer - Security Warning"
                # "The publisher could not be verified."
                "CheckExeSignatures": "no",
            },
        ],
    ]

    def setup_proxy(self, proxy_host):
        """Configure Internet Explorer to route all traffic through a
        proxy."""
        self.init_regkeys([[
            HKEY_CURRENT_USER,
            "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Internet Settings",
            {
                "MigrateProxy": 1,
                "ProxyEnable": 1,
                "ProxyHttp1.1": 0,
                "ProxyServer": "http://%s" % proxy_host,
                "ProxyOverride": "<local>",
            },
        ]])
	
    
    def check_url(self,url):
	    try:
		p = urlparse(url)
		if not p.scheme:
		        url = "http://"+url
		        p = urlparse(url)
		#print str(p)
		if p.scheme=="http":
		        c = httplib.HTTPConnection(p.netloc,timeout=2)
		elif p.scheme=="https":
		        context = ssl._create_unverified_context()
		        c = httplib.HTTPSConnection(p.netloc,context=context,timeout=2)
		        #print str(c)   
		c.request("HEAD", p.geturl())
		status = c.getresponse().status
		#print str(status)
		return status < 400
	    except:
		return False


    def get_urls(self, in_file):
	ret_set = set()
	with open(in_file, 'r') as myfile:
		data=myfile.read()

	html_page = data
 
	#soup = BeautifulSoup(html_page)
	#for link in soup.findAll('a'):
	#	ret_set.add(link.get('href'))


	urls = re.findall('http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\(\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+', html_page)
	
	for u in urls:
		ret_set.add(u)	

	return ret_set

 
    def add_html_ext(self, target):
	# If it's a HTML file, force an extension, or otherwise Internet
        # Explorer will open it as a text file or something else non-html.
        if os.path.exists(target) and not target.endswith((".htm", ".html")):
            os.rename(target, target + ".html")
            target += ".html"
            log.info("Submitted file is missing extension, adding .html")
	return target


    def form_js_file(self, main_html):
	main_html_path = self.add_html_ext(main_html)
	# format the path to have \\ in place of \
	main_html_path = main_html_path.replace("\\","\\\\")
	contents = 'var navTab = 0x1000;\n'
	contents += 'var oIE = new ActiveXObject("InternetExplorer.Application");\n'
	contents += 'oIE.Navigate2("' + main_html_path + '");'
        urls = self.get_urls(main_html_path)
	for u in urls:
		contents += 'oIE.Navigate2("' + u + '", navTab);'
	
	contents += 'oIE.Visible = true;'
	js_file_name = os.path.dirname(os.path.abspath(main_html)) + '\submit_all_urls.js'
	
	js_file = open(js_file_name, 'w')
	js_file.write(contents)
	js_file.close()
	
	log.warning(contents)
	
	return js_file_name
	


    def start(self, path):
        if "proxy" in self.options:
            self.setup_proxy(self.options["proxy"])
	
	powershell_path = "C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe"
	
	#log.error("Path: " + powershell_path)

	main_html_path = self.add_html_ext(path)
        # format the path to have \\ in place of \
        #main_html_path = main_html_path.replace("\\","\\\\")
	#arg = "Start-Process " + main_html_path
	
	#tmp_args = [powershell_path, "Start-Process", main_html_path]
	#try:
	#	popen = subprocess.Popen(tmp_args)
	#	popen.wait()
	#except e:
	#	log.error(str(e))

	#log.error("Succeeded in the first popen")
	
	iexplore = self.get_path("Internet Explorer")
        log.error(iexplore)
	main_pid = self.execute(iexplore, args=[main_html_path], maximize=True,
                            mode="iexplore")
	
	time.sleep(3)
	
	urls = self.get_urls(main_html_path)
	
	counter = 0
	for u in urls:
		if self.check_url(u) == False:
			continue;

		arg = "Start-Process " + u
		tmp_args = [powershell_path, "Start-Process", u]
		try:
			p = subprocess.Popen(tmp_args)
			p.wait()
		except e:
			log.error(str(e))
	        #self.execute(powershell_path, args=[arg])
	        #log.error("Succeeded in the next popen") 


        return main_pid 
