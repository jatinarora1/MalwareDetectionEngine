#!/usr/bin/env python
# Copyright (C) 2010-2013 Claudio Guarnieri.
# Copyright (C) 2014-2015 Cuckoo Foundation.
# This file is part of Cuckoo Sandbox - http://www.cuckoosandbox.org
# See the file 'docs/LICENSE' for copying permission.


from lib.common.abstracts import Auxiliary
from lib.common.results import upload_to_host
import subprocess
import os
import sys
import shutil
import StringIO
from threading import Thread
import logging
import re
from lib.core.config import Config
import time

log = logging.getLogger(__name__)
new_file_name = None

cfg = Config("analysis.conf")
filesNeeded = [f.strip() for f in cfg.files_needed.split(',')]

#filesNeeded = ["EMPState_Debug.out", "EMPState_Visited.bin", "EMPState_Evasive.bin", "EMPState_Continue.txt","EMP_Debug.out", "EMP_Visited.bin", "EMP_Evasive.bin", "EMP_Continue.txt"]

def getNewFileName(path):
	global new_file_name
	with open(path, 'r') as f:
		this_line = f.readline()
	if not this_line == None:
		tokens = this_line.split("\\")
		log.info(tokens)
		new_file_name = tokens[-1]
		log.info(new_file_name)

def getFile(filename):	
	global new_file_name
	path = ""
        if 'ProcessInterceptor' in filename or 'LWR' in filename:
                root = os.path.join("C:", os.sep, "dlls")
                path = os.path.join(root,filename)
        else:
                root = os.environ["TEMP"]
                path = os.path.join(root,filename)
	if os.path.exists(path):
		upload_to_host(path,os.path.join("files","processing_files",filename))
		#upload_to_host(path,os.path.join("files","processing_files",filename),False)
	else:
		log.info("File %s not found" % filename)
		log.info("Path: %s" % path)

def moveFile(filename):
	copyPath = os.environ["TEMP"]	
	filePath = os.path.join(os.getcwd(), "processing_files")
	
	source = os.path.join(filePath,filename)
	if 'LWR' in filename:
		copyPath = os.path.join("C:", os.sep, "dlls")	
	destination = os.path.join(copyPath,filename)
	log.debug("destination: " + destination)
	if os.path.exists(source):
		shutil.copy2(source, destination)
		log.debug("Copying %s..." %source)
	else:
		log.warning("File %s not found" % source)

def copyDirEntries(src, dst):
    log.debug("Copying from " + src + " To" + dest)
    for item in os.listdir(src):
        s = os.path.join(src, item)
        d = os.path.join(dst, item)
        if os.path.isdir(s):
	    log.debug("Copying directory " + s)
            shutil.copytree(s, d)
        else:
	    log.debug("Copying file " + s)
            shutil.copy2(s, d)

def moveDLL(filename):
	copyPath = os.path.join("C:", os.sep, "dlls")	
	filePath = os.path.join(os.getcwd(), "sw_dll")
	
	source = os.path.join(filePath,filename)
	destination = os.path.join(copyPath,filename)
	log.debug("destination - dll: " + destination)
	if os.path.exists(source):
		shutil.copy2(source, destination)
		log.debug("Copying %s..." %source)
	else:
		log.warning("File %s not found" % source)


class dvasion(Auxiliary, Thread):
	def __init__(self, options={}, analyzer=None):
        	Thread.__init__(self)
		Auxiliary.__init__(self,options,analyzer)	

		#Move Processing Files (For EMP)	
		pathLocation = os.path.join(os.getcwd(),"processing_files")
		log.debug("Path for processing files: " + pathLocation)
		if (os.path.isdir(pathLocation)):
			fileList = os.listdir(pathLocation)
			for files in fileList:
				moveFile(files)

	
		log.debug("Copying DLLs")	
		#Move DLL Files (For Either)
		pathLocation = os.path.join(os.getcwd(),"sw_dll")
		copyPath = os.path.join("C:", os.sep, "dlls")
		#copyDirEntries(pathLocation,copyPath)

    		log.debug("Copying from " + pathLocation + " To" + copyPath)
		for item in os.listdir(pathLocation):
        		s = os.path.join(pathLocation, item)
        		d = os.path.join(copyPath, item)
        		if os.path.isdir(s):
	    			log.debug("Copying directory " + s)
            			shutil.copytree(s, d)
        		else:
	    			log.debug("Copying file " + s)
            			shutil.copy2(s, d)

		#if (os.path.isdir(pathLocation)):
		#	fileList = os.listdir(pathLocation)
		#	for files in fileList:
		#		moveDLL(files)

        	self.do_run = True

	def run(self):
		pass
	def stop(self):
		log.debug("Stopping dvasion.py, getting needed files")
		for files in filesNeeded:
			getFile(files)
			#time.sleep(1)
		self.do_run = False
