#!/bin/bash

#Get the necessary directories
CONFDIR=$(git rev-parse --show-toplevel)/conf
FILES=$(git rev-parse --show-toplevel)/conf/*.conf.orig

#Loop through the ".orig" configuration files
for f in $FILES; do
	
	#Get the base name of the file
	fname=${f##*/}
	bname=${fname%%.*}

	#If the file exists, copy it, otherwise tell the user it will not be copied
	if [ -e "$CONFDIR/$bname.conf" ]
	then
		echo "$bname.conf exists. Skipping file copy..."
	else
		echo "Copying $bname.conf.orig to $bname.conf"
		rsync --ignore-existing $f $CONFDIR/$bname.conf
	fi
done

#Repeat the above for settings.py

SETTINGS=$(git rev-parse --show-toplevel)/web/web/settings.py
SETTINGSORIG=$SETTINGS.orig

if [ -e "$SETTINGS" ]
then
	echo "settings.py exists. Skipping file copy..."
else
	 echo "Copying settings.py.orig to settings.py"
         rsync --ignore-existing $SETTINGSORIG $SETTINGS
fi


#Create git hooks to warn user when ".orig" conf files change
#From http://stackoverflow.com/questions/3462955/putting-git-hooks-into-repository
HOOK_NAMES="post_merge"
HOOK_DIR=$(git rev-parse --show-toplevel)/.git/hooks
NEW_HOOKS=$(git rev-parse --show-toplevel)/git_hooks/

#Create a symbolic link to the hook
for hook in $HOOK_NAMES; do
	ln -s -f $NEW_HOOKS/$hook $HOOK_DIR/$hook
done

echo "Created link to git hook in $HOOK_DIR/$hook"


chmod +x .git/hooks/*
