#!/bin/bash
set -e

MML_DIR=/storage/utils/modules/malwareml
base_dir=$(pwd)
output_dir=$base_dir/output
analysis_dir=$base_dir/storage/analyses

mkdir -p $output_dir/errors
mkdir -p $output_dir/reports
mkdir -p $output_dir/cuckoo_reports
mkdir -p $output_dir/progfeatures

# Go through the analysis folders
cd $analysis_dir
for sample_num in *; do
    echo Processsing $sample_num

    sample_dir=$analysis_dir/$sample_num
    sample_hash=$(ls -l $sample_dir/binary | rev | cut -d '/' -f 1 | rev)
    
    # Convert EMP_ProgFeatures.bin to progFeatures.txt
    # If there is no EMP_, ERROR
    if [ ! -f $sample_dir/files/processing_files/EMP_ProgFeatures.bin ]; then
        echo $sample_hash >> $output_dir/errors/failed_no_emp_progfeatures.txt
        echo $sample_hash >> $output_dir/failed_hashes.txt
        if [ -f $sample_dir/reports/report.json ]; then
            mv $sample_dir/reports/report.json $output_dir/cuckoo_reports/"$sample_hash".json
        fi
        continue
    fi
    cd $sample_dir/files/processing_files
    if ! $base_dir/utils/deboost; then
        echo $sample_hash >> $output_dir/errors/failed_deboost.txt
        echo $sample_hash >> $output_dir/failed_hashes.txt
        if [ -f $sample_dir/reports/report.json ]; then
            mv $sample_dir/reports/report.json $output_dir/cuckoo_reports/"$sample_hash".json
        fi
        continue
    fi
    prog_features_file=$sample_dir/files/processing_files/progFeatures.txt

    # Add it to the report
    # If there is no report, ERROR
    report_path=$sample_dir/reports/report.json
    if [ ! -f $report_path ]; then
        echo $sample_hash >> $output_dir/errors/failed_no_report.txt
        echo $sample_hash >> $output_dir/failed_hashes.txt
        continue
    fi
    set +e
    $base_dir/utils/add_sw_note_sigs.py $report_path $report_path $prog_features_file
    # If there was an issue with the cuckoo report...ERROR
    ret=$?
    if [ "$ret" -ne 0 ]; then
	echo $sample_hash >> $output_dir/errors/failed_empty_or_bad_report.txt
	echo $sample_hash >> $output_dir/failed_hashes.txt
	mv $prog_features_file $output_dir/progfeatures/"$sample_hash".progfeatures.txt
	continue
    fi
    set -e
    # Move the report to output
    mv $report_path $output_dir/reports/"$sample_hash".json

    echo
done

# Get features
cd $output_dir
mkdir -p features
ls reports/ | parallel --pipe -u -N 100 -j 1 "$MML_DIR/get_features.py -v -f /dev/stdin -o features/ reports/"

echo Done Processing Results
