# Copyright (C) 2017 KillerInstinct
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

from lib.cuckoo.common.abstracts import Signature

class Kelihos_APIs(Signature):
    name = "kelihos_behavior"
    description = "Exhibits behavior characteristic of Kelihos malware"
    weight = 3
    severity = 3
    categories = ["bot"]
    families = ["kelihos"]
    authors = ["KillerInstinct"]
    minimum = "1.2"
    evented = True

    def __init__(self, *args, **kwargs):
        Signature.__init__(self, *args, **kwargs)
        self.config_key = str()
        self.peer_connect = set()
        self.socket_tracker = dict()
        self.bad_pid = 0

    filter_apinames = set(["RegSetValueExA", "connect", "ioctlsocket", "socket",
                           "setsockopt", "WSASocketA", "closesocket"])

    def on_call(self, call, process):
        if call["api"] == "RegSetValueExA":
            buf = call["arguments"]["value"]
            try:
                    #If integer, lets just continue
                   intval = int(buf)
                   return None
            except:
                    pass
                    #Do nothing#
                    
            buf = (buf).encode('ascii','ignore').decode('ascii')
		
            if buf and buf.startswith(r"\xa2IM\xf3\xd9\x1e\x9f\x88\x01"):
                print "Check"
                self.bad_pid = process["pid"]
                self.config_key = call["arguments"]["regkey"]
                return None

        if self.bad_pid and process["pid"] == self.bad_pid:
            if call["api"] in ["socket", "WSASocketA"] and call["return"]:
                created_socket = call["arguments"]["socket"]
                self.socket_tracker[created_socket] = {
                    "has_cmd": False,
                    "sets_opt": False
                }

            elif call["api"] == "ioctlsocket":
                requested_socket = call["arguments"]["socket"]
                if requested_socket in self.socket_tracker:
                    if "0x8004667e" == call["arguments"]["cmd"]:
                        self.socket_tracker[requested_socket]["has_cmd"] = True

            elif call["api"] == "setsockopt":
                requested_socket = call["arguments"]["socket"]
                if requested_socket in self.socket_tracker:
                    level = call["argument"]["level"]
                    optname = call["arguments"]["optname"]
                    optval = call["arguments"]["optval"]
                    if level == "0x00000006" and optname == "0x00000001" and optval == r"\x01\x00\x00\x00":
                        self.socket_tracker[requested_socket]["sets_opt"] = True

            elif call["api"] == "connect":
                requested_socket = call["arguments"]["socket"]
                if requested_socket in self.socket_tracker:
                    if self.socket_tracker[requested_socket]["has_cmd"]:
                        if self.socket_tracker[requested_socket]["sets_opt"]:
                            ip = call["arguments"]["ip_address"]
                            port = call["arguments"]["port"]
                            self.peer_connect.add("{0}:{1}".format(ip, port))

            elif call["api"] == "closesocket":
                requested_socket = call["arguments"]["socket"]
                if requested_socket in self.socket_tracker:
                    del self.socket_tracker[requested_socket]

        return None

    def on_complete(self):
        if self.config_key:
            self.mark_ioc("ConfigLocation", self.config_key)
            if self.peer_connect:
                for peer in self.peer_connect:
                    self.mark_ioc("C2", peer)

            return True

        return False
