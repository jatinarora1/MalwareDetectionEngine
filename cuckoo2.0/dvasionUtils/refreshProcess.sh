#!/bin/bash
DEFAULTNUMBER=7
CUSTOMNUMBER=false

while [[ $# -gt 0 ]]; do
	arg="$1"
	case $arg in
		-p) PROCESS_NUM="$2"; CUSTOMNUMBER=true; shift ;;	#specify number of Virtual Machines
		*) # don't do anything ;;
	esac
	shift
done

if [ "$CUSTOMNUMBER" == "false" ] ; then
	PROCESS_NUM=$DEFAULTNUMBER
fi

CUCKOO_DIRECTORY=$(dirname "$(dirname "$(readlink -f "$0")")")
PROCESS_COMMAND="python $CUCKOO_DIRECTORY/utils/process.py -p $PROCESS_NUM auto"


check_if_restart ()
{
	#Get list of process.py
	tmpfile=$(mktemp)
	echo $tmpfile
	echo $1
	pgrep -f "process.py" > $tmpfile
	readarray pids < $tmpfile

	rm $tmpfile
	
	totalUsage=0.0
	cpuUsage=0.0

	#If some process.py failed or had assertion, we should restart	
	numPids=${#pids[*]}
	if [ $numPids -lt $2 ] ; then
		echo "Some processes killed. Restart"
		echo $numPids
		echo $2
		return 0
	fi

	#We have to exclude base process
	numPids=$((numPids-1))
	#Compute average CPU usage except the base process
	for pid in "${pids[@]}"
	do 
		if [ $pid = $1 ] ; then
			echo "Ignoring PID"
		else
			echo $pid
			cpuUsage=$(top -p $pid -n1 -b | tail -n 1 | awk -v N=9 '{print $N}')
			echo $cpuUsage
			totalUsage=$(echo $totalUsage + $cpuUsage | bc)
		fi
	done

	echo $totalUsage
	boundVal=$((20*$numPids))
	echo $boundVal
	#If average CPU usage is less than 20, then restart
	if [ $(echo "$totalUsage < $boundVal" | bc) -ne 0 ] ; then
		echo "Restart"
		return 0 #TRUE
	else
		echo "Do No Restart"
		return 1 #FALSE
	fi
}

function stop_processes {
	#PKILL all processes run from the cuckoo directory this script is found
	#in. This means that you cannot have multiple process.py instances running
	#but this can lead to problems anyway.

	pkill -f -9 "$PROCESS_COMMAND"
}

function finish {
	#Pkill all the matched processes
	stop_processes
}
trap finish EXIT 

echo "Runnning $PROCESS_COMMAND ..."

cd $CUCKOO_DIRECTORY


echo "Starting Process"
($PROCESS_COMMAND) &>/dev/null &
PROCESS_PID=$(jobs -p)
echo $PROCESS_PID
RestartedWaitCount=2

while [ 1 ]
do
	echo "Sleeping"
	sleep 60
	if [ $RestartedWaitCount -gt 0 ]; then
		RestartedWaitCount=$(($RestartedWaitCount-1))
	
	elif check_if_restart $PROCESS_PID $PROCESS_NUM; then
		echo "Woken up"
		echo "Killing Process"
		sleep 4
		stop_processes
		sleep 2
		echo "Starting Process"
		($PROCESS_COMMAND) &> /dev/null &
		PROCESS_PID=$(jobs -p)
		echo $PROCESS_PID
		RestartedWaitCount=2
	fi
done
