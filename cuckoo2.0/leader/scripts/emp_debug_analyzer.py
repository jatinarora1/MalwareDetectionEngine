#!/usr/bin/python

import re
import networkx as nx
import sys

CallGraph=nx.DiGraph()
CFG=nx.DiGraph()

CallerBBs = dict()

def get_shortest_bb_path():
	pass


def get_all_caller_bbs():
	build_caller_bbs_map()
	return CallerBBs[sys.argv[2]]	


def get_next_successor(succ_text):
	found = re.search('\(Func entry: (.+?)\), (.*)', succ_text)
	if found:
		#print "Found: " + found.group(1) + " Remaining text: " + found.group(2)
		return (found.group(1),found.group(2))
	else:
		return ('','')

def get_emp_debug_lines():
	retlist=[]
	f = open("EMP_Debug.out","r")
	for line in f:
		retlist.append(line)
	return retlist

def build_caller_bbs_map():
	lines = get_emp_debug_lines()
	
	for line in lines:
		line1 = line
		found = re.search('BB: (.+?)-(.+?) \((.)\) (.*?) given BB: (.+?)-(.+?) \((.)\) is executed; is calling function: (.+?)-0x0',line1)
		#found = re.search('BB: (.+?)-(.+?) \((.)\) given',line1)
                #found = re.search('BB: (.+?)-(.+?) \((.)\) (.*?) given',line1)

		if found:
			#print line
			#print found.group(1)
			#print found.group(2)
			#print found.group(3)
			#print found.group(4)
			#print found.group(5)
			#print found.group(6)
			#print found.group(7)
			#print found.group(8)
			CallerBBs[found.group(8)] = {found.group(4) : found.group(1)}
			

def build_callgraph():
	lines = get_emp_debug_lines()
	
        for line in lines:
                line1 = line
                found = re.search('Function Entry: (.+?)( +?)(.+?) Function with successors: (.*)', line1)
                if found:
                        #print line
                        #print found.group(1)
                        parent = found.group(1)
                        #print found.group(2)
                        succ_text = found.group(4)
                        while succ_text != "":
                                next_succ = get_next_successor(succ_text)
                                #print next_succ[0]
                                child = next_succ[0]
				succ_text = next_succ[1]

				if child=='':
					continue
                                
				try:
					if nx.has_path(CallGraph, child, parent) == False:
						CallGraph.add_edge(parent, child)
						#print "Edge added between: " + parent + " and " + child + " because of line: \n" + line1
					
				except:
					#one of the nodes is not there, add the edge
					CallGraph.add_edge(parent, child)
					#print "Edge added (exception) between: " + parent + " and " + child + " because of line: \n" + line1 

	cyc = list(nx.simple_cycles(CallGraph))
	if len(cyc) != 0:
		print "Error, found the following cycles in the graph:\n"
		print cyc


def get_shortest_callgraph_path():
	src=sys.argv[2]
	dest=sys.argv[3]

	build_callgraph()	
	num_nodes = nx.number_of_nodes(CallGraph)

	if num_nodes == 0:
		print "Number of nodes in the CallGraph is zero. Probably the debug file is missing some prints"
		return
	else:
		print "Number of nodes in the CallGraph is: " + str(num_nodes)
		
	paths = nx.shortest_path(CallGraph,source=src,target=dest)
	print "Path: " + str(paths)


def main():
	querydict = {
		'get_shortest_callgraph_path' : get_shortest_callgraph_path,
		'get_shortest_bb_path' : get_shortest_bb_path,
		'get_all_caller_bbs' : get_all_caller_bbs
	}
	
	#try:
	querydict[sys.argv[1]]()
	'''
	except:
		print "\n\tNot a valid command. Available commands:"
		for cmd in querydict:
			print "\t\t" + cmd
		print "\n"
	'''



if __name__ == "__main__":
	main()

