'''
Created on Feb 3, 2017

@author: Khaled ElWazeer
'''

import json
import os
import re

class SignatureClassifier(object):
    
    SIGS_CLASS_ENTRY = "signature_classification"
    
    def __init__(self, memReport, cuckoo_folder="."):
        self.report = memReport
        self.cuckoo_folder = cuckoo_folder
        
    @classmethod
    def from_file(cls, filename, cuckoo_folder="."):
        report = json.load(filename)
        instance = cls(report, cuckoo_folder)
        return instance
    
    
    '''
        Classifies the signatures inside the current report
    '''
    def classify_sigs(self):
        '''
        Iterate over all the signatures, get for each one the classification
        then add it back to the report inside a new entry
        '''
        for sig in self.report["signatures"]:
            """ For this signature, get the id  """
            # Get the signature family
            families = self.get_families_for(sig)
            
            for family in families:
                self.add_signature_to_family(sig, family)


                
                
    def add_signature_to_family(self, sig, family):
        #Add this signature to the family
        
        
        #Do we have a signature classification entry
        if not self.SIGS_CLASS_ENTRY in self.report:
            self.report[self.SIGS_CLASS_ENTRY] = dict()
        
        if not family in self.report[self.SIGS_CLASS_ENTRY]:
            self.report[self.SIGS_CLASS_ENTRY][family] = dict()
        
        sig_description = sig["description"]
        
        print "Adding signatures: \"" + sig_description + "\" to class: " + family
        
        current_family = self.report[self.SIGS_CLASS_ENTRY][family] 
        #now we have the family entry. Add to that

	#print current_family

	present_sig = ""

	## If there is a family in the signature 
	if 'description' in current_family:
#		print "Present signature: ", current_family["description"]
		present_sig = current_family["description"] + ", "

        current_family["description"] = present_sig  + sig_description

	#print 'Signature: ', current_family["description"]

        
        
    def get_families_for(self, sig):
        #Given a signature, get the family from the file
        filename = self.get_file_for_sig(sig)
        
        if filename != "Unknown":
            return self.get_families_from_file(filename)
        else:
            return ["Program-level-features"]
        
    
    def get_file_for_sig(self, sig):
        name = sig["name"]
        sigs_path = self.cuckoo_folder + "modules/signatures/"
        #print "Looking at folder: " + sigs_path
	### Look at all files in all sub-directories ### 
	for root, dirs, files in os.walk(sigs_path):
          for fname in files:
	    #print 'File name:', fname
            #full_path = sigs_path + "/" + fname
	    full_path = os.path.join(root, fname)
            if (os.path.isfile(full_path)) and fname.endswith(".py"):
                #print "Looking at file: " + full_path
                with open(full_path) as f:
                        for line in f:
                            try:
                                if name in line:
                                    #print "Found file: " + full_path
                                    return full_path
                            except UnicodeDecodeError:
                                #print "File: " + full_path + " Line: " + line + " has non-ascii characters"
                                pass
                        
                        
        return "Unknown"
        
        
    def get_families_from_file(self, filename):
        with open(filename) as f:
            for line in f:
                stripped_line = re.sub("[\s+]","",line)
                #print "Stripped line: " + stripped_line
                match = re.search("categories=\[(.+)\]", stripped_line)
                if match:
                    #Loop for each split
                    str_match = match.groups(1)[0]
                    families = str_match.split(",")
                    #print "Families: " + str(families)
                    ret_families = []
                    for family in families:
                        match = re.search("\"(.+)\"", family)
                        if match:
                            current_feature = match.groups(1)[0]
                            #print "current feature: " + current_feature
                            ret_families.append(current_feature)
                        
                        
                    return ret_families
        
        return ["Unknown"]
    
    
    def dump_json(self, out_file):
        with open(out_file, "w") as f:
            json.dump(self.report, f, indent=4)
