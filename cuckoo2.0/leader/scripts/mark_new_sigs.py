#!/usr/bin/python
import sys
import re
import os
from MalwareSampleReport import MalwareSampleReport

ported_sigs_file = "new_sigs_descriptions.txt"

def get_new_sigs(new_sigs_file):
	
	newSigs = []
	try:
		f = open(new_sigs_file,'r')
		lines = f.readlines()
	
		startedNewSigs=False
		for l in lines:
			#print l
			if startedNewSigs:
				#Does it already has a NEW tag
				if "(NEW)" in l:
					continue;

				m = re.match("  \|-> \(\d*\) - (.*)", l)
				#print str(m.groups())
				if m.groups()[0]:
					newSigs.append(m.groups(0)[0])

			elif l == "---NEW SIGNATURES---\n":
				startedNewSigs = True
				#print "Started New Sigs"
	except:
		pass

	return newSigs

def get_ported_sigs(ported_file):
	f = open(ported_file)
	lines = f.readlines()
		
	newSigs = []
	for l in lines:
		newSigs.append(l.rstrip())
	
	return newSigs	


def add_tag_in_file(sigs, jsonReport):
	report = MalwareSampleReport(jsonReport)
	report_sigs = report.get_all_signatures()
	#print "Got: " + str(len(report_sigs)) + " signatures"
	for s in report_sigs:
		#It is important to see if one of our new signatures is contained inside the current report signature
		#The problem is that some of our ported signatures are just substrings of the actual signature in the report
		#For example: Listens to port ...
		if any(new_sig_it in s["description"] for new_sig_it in sigs):
			report.mark_sig_as_new(s)
			print "Marked: " + s["description"] + " as a new signature"
		else:
			#print s["description"] + " does not match"
			pass
	
	report.dump_json_file(jsonReport)
		

def add_mark_in_file(sigs, outfile):
	for s in sigs:
		print "Adding mark (NEW) to signature: " + str(s)
		os.system("sed -i 's/" + s + "/(NEW) " + s + "/' " + outfile)



def main():
	
	current_path = os.path.dirname(os.path.realpath(__file__))
	newSigFile = sys.argv[1]
	outReport = sys.argv[2]
	ported_sigs_list_file = current_path + "/" + ported_sigs_file
	
	#print newSigFile
	allSigs = get_new_sigs(newSigFile)
	allSigs = allSigs + get_ported_sigs(ported_sigs_list_file)
	#add_mark_in_file(allSigs, outReport)
	add_tag_in_file(allSigs, outReport)
	

if __name__ == "__main__":
	main()
