#!/usr/bin/python

import sqlalchemy
import logging
import sys
import hashlib
import datetime

from sqlalchemy import create_engine

logging.basicConfig()
log = logging.getLogger()

PENDING = 0
STARTED = 1
FAIL = 3
COMPLETED = 2

connect_string = "mysql://frontend_flatback:R9EJQAFPDTjahqZ9grv434oGA8pOk8Tq@127.0.0.1:3306/Dvasion_Cloud"

engine = create_engine(connect_string)

db_connection = engine.connect()


def get_current_time_string():
	return (datetime.datetime.utcnow()).strftime("%Y-%m-%d %H:%M:%S")

def get_sha256(filepath):
	hasher = hashlib.sha256()
	blocks = 65536
	with open(filepath,'rb') as this_bin:
		hbuffer = this_bin.read(blocks)
		while len(hbuffer) > 0:
			hasher.update(hbuffer)
			hbuffer = this_bin.read(blocks)
	return hasher.hexdigest()


class sample_db_record(object):
	
	def __init__(self, malware_path, is_hash):
		if is_hash:
			self.hash = malware_path
		else:
			self.hash = get_sha256(malware_path)
		
	def mark_started(self):
                self.mark(STARTED)

	def mark_done(self, malware_id, report_id, rewritten_id="",html_id="",pcap_id=""):
		self.mark(COMPLETED, malware_id, report_id, rewritten_id,html_id,pcap_id)

	def mark_failed(self, malware_id):
		self.mark(FAIL,malware_id)

	def get_time_stmt(self, state):
		today = get_current_time_string()
                time_stmt = ""
                if state == STARTED:
                        time_stmt = "TimeStarted=\"" + today + "\""
                elif state==COMPLETED or state==FAIL:
                        time_stmt = "TimeCompleted=\"" + today + "\""
                else:
                        log.critical("Error, unsupported state")
                        exit(-1)
		return time_stmt
	
	def mark(self, state, malware_id="", report_id="", rewritten_id="", html_id="", pcap_id=""):	
		stmt = "UPDATE Samples SET " + self.get_time_stmt(state) + ",State=" + str(state)
		if malware_id != "":
			stmt += ",OriginalSampleID=\"" + malware_id + "\""
		if report_id != "":
			stmt += ",DvasionReportID=\"" + report_id + "\""
		if rewritten_id != "":
			stmt += ",RewrittenSamplesID=\"" + rewritten_id + "\""
		if html_id != "":
			stmt += ",DvasionHTMLID=\"" + html_id + "\""
		if pcap_id != "":
			stmt += ",PCAPZipID=\"" + pcap_id + "\""
		
		stmt += " WHERE MalwareHash=UNHEX(\"" + self.hash+"\");"

		print stmt
		result = db_connection.execute(stmt )
		if result.rowcount == 0:
			raise ValueError("Cannot find this hash")
	
	def get_google_id(self, req):
		if req==0:
			stmt = "Select OriginalSampleID from Samples Where HEX(MalwareHash)='" + str(self.hash) + "';"
		elif req==1:
			stmt = "Select DvasionReportID from Samples Where HEX(MalwareHash)='" + str(self.hash) + "';"
		elif req==2:
			stmt = "Select DvasionHTMLID from Samples Where HEX(MalwareHash)='" + str(self.hash) + "';"
		elif req==3:
			stmt = "Select RewrittenSamplesID from Samples Where HEX(MalwareHash)='" + str(self.hash) + "';"
		elif req==4:
			stmt = "Select PCAPZipID from Samples Where HEX(MalwareHash)='" + str(self.hash) + "';"

		result = db_connection.execute(stmt)
		if result.rowcount == 0:
			return ""
		else:
			for row in result:
				#print str(row)
				return row[0]

