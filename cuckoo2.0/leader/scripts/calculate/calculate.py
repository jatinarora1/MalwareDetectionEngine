#!/usr/bin/env python

import os
import math
from subprocess import call
from decimal import Decimal

def calcOptimalValues(procn,cpufr,memval):	
	#jobs = round((procn * (.142)) + (cpufr * (2.083)))
	jobs = round((procn * (.48)) + (cpufr * (3.95)))

	#Calculate maximum number of processes from available RAM	
	jobsvm = round(memval/2.5)
	if jobsvm < jobs:
		jobs = jobsvm

	#processes = round((procn * (.1389)) + (cpufr * (6.667)))
	processes = 10
	if procn > 8:
		processes = 16


	time = round((procn * (1.24)) + (cpufr * (11.46)))

	#Remove decimal points through integer truncation, return these
	#No rounding, since we really want the floor of these values
	with open("dvasion_config.conf",'w+') as f:	
		f.write("JOBS: " + str(int(Decimal(jobs))) + "\n")
		f.write("PROCESSES: " + str(int(Decimal(processes)))+ "\n")
		f.write("TIME: " + str(int(Decimal(time))) + "\n")
	

processornum_val = 0
physicalnum_val = 0
cpufrequency_val = -1.0
physicalmem_val = 0

processornum = "0"
physicalnum = "0"
cpufrequency = "0"
physicalmem = "0"

#Force the script to run from the folder the file is in
script_path = os.path.dirname(os.path.realpath(__file__))
os.chdir(script_path)

call (["bash", "systeminfo.sh"])

with open("system_info.txt") as f:
	for line in f.readlines():
		if "PROCESSOR_CORES:" in line:
			processornum = line.rstrip('\n').replace("PROCESSOR_CORES: ", "").lower()
		if "PHYSICAL_CORES:" in line:
			physicalnum = line.rstrip('\n').replace("PHYSICAL_CORES: ", "").lower()
		if "CPU_FREQUENCY:" in line:
			cpufrequency = line.rstrip('\n').replace("CPU_FREQUENCY: ", "").lower()
		if "PHYSICAL_MEMORY:" in line:
			physicalmem = line.rstrip('\n').replace("PHYSICAL_MEMORY: ", "").lower()

#Prepare values (Mhz to Ghz, etc)
#Original calculations were in GHz, so if a command includes the unit measurement, we can convert
#All values output by "systeminfo.sh" should include this
freq_conversion_dict= {"mhz" : .001,
		       "ghz" : 1,}

for unit in freq_conversion_dict:
	if unit in cpufrequency:
		cpufrequency = cpufrequency.replace(unit,"")
		cpufrequency_val = float(cpufrequency) * freq_conversion_dict[unit]

if (cpufrequency_val == -1.0):
	cpufrequency_val=float(cpufrequency)


processornum_val = float(processornum)

physicalmem_val = float(physicalmem)


calcOptimalValues(processornum_val,cpufrequency_val,physicalmem_val)
