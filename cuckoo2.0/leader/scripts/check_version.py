#!/usr/bin/python

import os
import hashlib
import tempfile
import shutil
from SCP_Transport import SCP_Transport

FILES_REL_PATH = "./analyzer/windows/sw_dll"
VERSION_FILE = "./version.txt"

FILES_LIST = ["ProcessInterceptor.exe", "WatchLibraryDLL.dll", "dvasion", "dvasion.dll"]
BINARIES_PATH = "/home/binaries/binaries"
SERVER = "www.secondwrite.com"
PORT = 1234
USERNAME = "binaries"

def get_root_cuckoo_path(current_dir):
	return current_dir

def get_version_number(root_dir):
	fname = root_dir + "/" + VERSION_FILE
	version_number = "0.0.0"
	with open(fname) as f:
		version_number = f.readlines()
	
	version = version_number[0]
	if version.endswith('\n'):
		version = version[:-1]
	
	return version


def transfer_files_with_version_to(version_number, dest_folder):
	s = SCP_Transport(username=USERNAME, server=SERVER, port=PORT)
	if not s.connected:
		print "Connection failure to the binaries server, aborting!"
		exit(-1)

	for f in FILES_LIST:
		remote_path = BINARIES_PATH + '/' + version_number + '/' + f
		if not s.get(remote_path, dest_folder):
			print "Cannot transfer file: " + f + ". Halting!"
			exit(-1)
	

def get_version_hashes(version_number):
	tmp = tempfile.mkdtemp()
	transfer_files_with_version_to(version_number, tmp)
	hashes = get_hashes_at(tmp)
	shutil.rmtree(tmp)
	return hashes


def get_current_hashes(root_dir):
	return get_hashes_at(root_dir + FILES_REL_PATH)


def get_hashes_at(folder):
	ret = []
	for f in FILES_LIST:
		path = folder + f
		ret.append(get_sha256(path))
	return ret


def get_sha256(file_path):
	BLOCKSIZE = 65536
	hasher = hashlib.sha256()
	with open(file_path, 'rb') as afile:
		buf = afile.read(BLOCKSIZE)
    		while len(buf) > 0:
        		hasher.update(buf)
        		buf = afile.read(BLOCKSIZE)

	return hasher.hexdigest()




cwd = os.getcwd()

cuckoo_dir = get_root_cuckoo_path(cwd)

version_number = get_version_number(cuckoo_dir)

if version_number == "0.0.0":
	print "Error: cannot get the current version number of dvasion"
	exit(-1)

hashes_correct = get_version_hashes(version_number)

hashes_current = get_current_hashes(cuckoo_dir)

if hashes_correct != hashes_current:
	print "Version: " + str(version_number) + " is incompatible with the current binaries"
	exit(-1)
else:
	exit(0)
			
