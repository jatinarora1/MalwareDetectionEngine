from paramiko import SSHClient
from scp import SCPClient

import paramiko
import scp
import os

class SCP_Transport(object):
	"""A wrapper around scp from SCPClient"""
	def __init__ (self, server, username, port=22):
		self.ssh = SSHClient()
		self.ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
		self.ssh.load_system_host_keys()
		self.port = port
		self.username = 'khaled'
		self.server = 'www.secondwrite.com'
		try:
			self.ssh.connect('www.secondwrite.com', username=username, port=port)
			# SCPCLient takes a paramiko transport as its only argument
			self.scp = SCPClient(self.ssh.get_transport())
			self.connected = True
			
		except paramiko.ssh_exception.AuthenticationException as e:
			print "Authentication failed. Make sure to put your public key as one of the authorized keys at the remote user machine. Run the following on Linux: "
			print "ssh-keygen -t rsa"
			print "ssh " + username + "@" + server + " -p " + str(port) + " mkdir -p .ssh"
			print "cat ~/.ssh/id_rsa.pub | ssh " + username + "@" + server + " 'cat >> .ssh/authorized_keys'"
			self.ssh.close()
			self.connected=False
	
	def put(self, src, dest):
		if self.connected:
			self.scp.put(src, dest)
		else:
			print "Not connected. Cannot do put"
	
	def get(self, src, dest):
		cwd = os.getcwd()
		dest_dir = os.path.dirname(dest)
		if dest_dir != "":
			os.chdir(dest_dir)
		
		try:
			self.scp.get(src)
		except scp.SCPException as e:
			print "Error: " + str(e)
			return False
		
		if cwd != "":
			os.chdir(cwd)
		return True
	
	def __del__(self):
		try:
			self.scp.close()
			self.ssh.close()
		except AttributeError: #If either one is not created yet
			pass

