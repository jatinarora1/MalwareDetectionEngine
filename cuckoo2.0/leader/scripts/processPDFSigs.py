import tempfile
import os
import sys
import shutil
import string
import re

from MalwareSampleReport import MalwareSampleReport

#Input malware sample
inSample = sys.argv[1]


#Input cuckoo report
inReport = sys.argv[2]

outReport = sys.argv[3]

sampleReport = MalwareSampleReport(inReport)


#Create a dictionary of PDF signatures
PDFSignatures = {"JavaScript" : 
			{'name':'Javascript','description':'This PDF file contains Javascript blocks.','severity':1},	
		  "XFA" :
			{'name':'XMLForms','description':'This PDF file contains XML forms.','severity':2},
		  "AA" :
			{'name':'AutoAction','description':'This PDF file contains autoactions.','severity':2},
		  "OpenAction" :
			{'name':'OpenAction','description':'This PDF file contains open actions at pages.','severity':2},	
		  "Names" :
			{'name':'ObfuscatedNames','description':'This PDF file contains obfuscated names.','severity':2},
		  "AcroForm" :
			{'name':'AcroForm','description':'This PDF file contains acroforms.','severity':2},
		  "Launch" :
			{'name':'LaunchEvent','description':'This PDF file contains launch events.','severity':3},
		  "Embedded" :
			{'name':'EmbeddedFiles','description':'This PDF file contains Embedded files.','severity':3},
		  "CVE" :
			{'name':'CVE','description':'This PDF file tries to exploit known CVE vulnerability.','severity':10},
}



def createAndAddSig(inSigInfo,curline):

	sig = dict()
  	sig["families"] = list()
  	sig["name"] = inSigInfo['name']
	sig["description"] = inSigInfo['description']


  	sig["severity"] = int(inSigInfo['severity'])
  	sig["marks"] = list()
	#Process separately for CVE to add CVE info
	if inSigInfo['name']=="CVE":
		#Remove unicode characters from the line
		curline = re.sub(u'\u001b\[.*?[@-~]', '', curline)
		curline = curline.strip()
		sig["marks"].append(curline)
  	sig["references"] = list()

	sampleReport.add_signature(sig)


#Function that processing PeePDF output and adds the signatures to json file
def processPeePDFOutput(inFile):
	
	#Get contents of the file
	lines = [line.rstrip('\n') for line in open(inFile)]

	suspiciousFound = False
	#Search for beginning of suspicious objects
	for line in lines:
		if "Suspicious" in line:
			suspiciousFound=True
			continue		

		if suspiciousFound==False:
			continue
			
		#Search for each suspicous signature
		for key in PDFSignatures:
			#IF this is current suspicious signature
			if key in line:	
				value = PDFSignatures[key]
				createAndAddSig(value,line)
								


#Delete PeePDF errors file if it exists
#os.remove("errors.txt")


#Create a temporary output file that we will delete manually
tf = tempfile.NamedTemporaryFile(delete=False)

#Run PeePDF to get the output
peepdfCmd = "python scripts/peepdf/peepdf.py -f " + inSample + ">" + tf.name
os.system(peepdfCmd)


#process its output 
processPeePDFOutput(tf.name)


#delete temporary file
os.remove(tf.name)

#dump the output
sampleReport.dump_json_file(outReport)
