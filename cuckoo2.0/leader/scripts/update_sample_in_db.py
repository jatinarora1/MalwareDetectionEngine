#!/usr/bin/python

import sqlalchemy
import logging
import sys
import hashlib
import datetime

from sqlalchemy import create_engine

logging.basicConfig()
log = logging.getLogger()

PENDING = 0
STARTED = 1
FAIL = 3
COMPLETED = 2

connect_string = None

try:
        with open('frontend.conf', 'r') as f:
                connect_string = f.readline().rstrip()
except Exception as e:
        log.critical("Error reading frontend.conf.")
        log.critical(e)
        sys.exit(1)



engine = create_engine(connect_string)

db_connection = engine.connect()


def get_current_time_string():
	return (datetime.datetime.utcnow()).strftime("%Y-%m-%d %H:%M:%S")

def get_sha256(filepath):
	hasher = hashlib.sha256()
	blocks = 65536
	with open(filepath,'rb') as this_bin:
		hbuffer = this_bin.read(blocks)
		while len(hbuffer) > 0:
			hasher.update(hbuffer)
			hbuffer = this_bin.read(blocks)
	return hasher.hexdigest()


class sample_db_record(object):
	
	def __init__(self, malware_path):
		self.hash = get_sha256(malware_path)
		
	def mark_started(self):
                self.mark(STARTED)

	def mark_done(self, report_id, html_id="",log_id="",rewritten_id="",pcap_id=""):
		self.mark(COMPLETED, "",report_id, html_id,log_id,rewritten_id,pcap_id)

	def mark_failed(self):
		self.mark(FAIL)

	def get_time_stmt(self, state):
		today = get_current_time_string()
                time_stmt = ""
                if state == STARTED:
                        time_stmt = "TimeStarted=\"" + today + "\""
                elif state==COMPLETED or state==FAIL:
                        time_stmt = "TimeCompleted=\"" + today + "\""
                else:
                        log.critical("Error, unsupported state")
                        exit(-1)
		return time_stmt
	
	def mark(self, state, report_id="", html_id="",log_id="",rewritten_id="", pcap_id=""):	
		stmt = "UPDATE Samples SET " + self.get_time_stmt(state) + ",State=" + str(state)
		#if malware_id != "":
		#	stmt += ",OriginalSampleID=\"" + malware_id + "\""
		if report_id != "":
			stmt += ",DvasionReportID=\"" + report_id + "\""
		if rewritten_id != "":
			stmt += ",RewrittenSamplesID=\"" + rewritten_id + "\""
		if html_id != "":
			stmt += ",DvasionHTMLID=\"" + html_id + "\""
		if pcap_id != "":
			stmt += ",PCAPZipID=\"" + pcap_id + "\""
		if log_id != "":
			stmt += ",DvasionLogID=\"" + log_id + "\""
		
		stmt += " WHERE MalwareHash=UNHEX(\"" + self.hash+"\");"

		print stmt
		result = db_connection.execute(stmt )
		if result.rowcount == 0:
			raise ValueError("Cannot find this hash")





if __name__ == "__main__":
	'''Arguments: 1st: malware path - 2nd: state - 3rd: report_id - 4th: html_id - 5th: Log file ID 6th: OPTIONAL: rewritten sample id - 7th: OPTIONAL: pcap zip id '''
	
	if (len(sys.argv) < 5):
		print "Invalid arguments to script. You need to specify the following arguments: 1st: malware path - 2nd: state - 3rd: json_report id, 4th: html_id - 5th: Log File ID"
		exit(-1)
	
	''' Read the malware hash '''
	malware_path = sys.argv[1]

	'''create a record for this sample'''	
	record = sample_db_record(malware_path)
	
	'''Read status'''
	state = int(sys.argv[2])
	
	rewritten_id = ""
	pcap_id = ""

	if state == STARTED:
		record.mark_started()
	elif state == COMPLETED:
		report_id = sys.argv[3]
		html_id = sys.argv[4]
		log_id = sys.argv[5]
		if len(sys.argv) > 6:
			rewritten_id = sys.argv[6]
		if len(sys.argv) > 7:
			pcap_id = sys.argv[7]
		print ("%s %s %s %s %s %s %s" % (str(state),str(report_id),str(html_id),str(log_id),str(rewritten_id),str(pcap_id)))
		record.mark_done(report_id, html_id,log_id,rewritten_id, pcap_id)
	elif state == FAIL:
		record.mark_failed()
	else:
		print "Invalid state argument"
		exit(-1)
	
	print "Succeeded!"	
	
	
