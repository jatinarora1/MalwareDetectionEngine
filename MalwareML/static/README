README

SetUp MalwareML Git Repo:
-------------------------
$ git pull origin master
$ git submodule init
$ git submodule update

Follow 'Building' and 'Dependencies' sections on (https://github.com/taviso/loadlibrary) 
to setup WindowsDefender through LoadLibrary


Install:
--------
-YARA
-ClamAV
$ sudo apt-get install clamav yara


Run Static Script:
------------------
*Copy static script to cuckoo2.0 directory to run
*Update YARA_DIR, OUTPUT_DIR, WINDEF_LOADLIB_DIR paths in static_script.py to your locations (if needed)
$ cp MalwareML/static/static_script.py /d1/cuckoo2.0
$ cd /d1/cuckoo2.0

*Script takes a file with a list of absolute paths to run, can give it a directory to run as shown ('programs_to_test.txt' contains list of programs to run)
$ cat programs_to_test.txt | parallel --pipe -u -N 2 -j 8 'python static_script.py /dev/stdinâ€™


Process to go from Static Reports to Running ML:
------------------------------------------------
Get features from reports:
$ python3.6 ~/MalwareML/get_features.py -v -o goodware_features/ goodware

Get counts for each features:
$ python3.6 /storage/utils/analysis/count_features.py goodware_features/

Identify features w/ greater than 100 count:
$ cat goodware_features_counts.txt | grep -i IMPORTED_API -A 1 | grep --no-group-separator -B 1 -P '^[0-9]{3,}$' | grep -i IMPORTED_API > importedAPIs_100plus.txt

Make copy of feature files:
$ cp -r goodware_features goodware_features_100API

Remove feature that have less than 100 count:
$ for x in 0 1 2 3 4 5 6 7 8 9 a b c d e f; do python3.6 /storage/utils/scrap/keep_some_features.py goodware_importedAPIs_100plus.txt goodware_features_100API/$x*; done

Run ML:
$ MML_CLASSIFIER='sk-rf' MML_CV=4 MML_N_JOBS=1 python3.6 ~/MalwareML/simple_ml.py -v test --results goodware_features_100API/ malware_features_100API/


To predict against an existing model
------------------------------------------------
Set MODEL_DIR to the location of the model you want to test with
$ MML_CLASSIFIER='sk-rf' python3.6 ~/MalwareML/simple_ml.py -vv predict -m $MODEL_DIR --results feature_dir_to_test/*

If you have the original reports (not the extracted features.json files), add the -e flag
$ MML_CLASSIFIER='sk-rf' python3.6 ~/MalwareML/simple_ml.py -vv -e predict -m $MODEL_DIR --results report_dir_to_test/*

Results will be output to results.json in the current directory
